import streamlit as st
import tensorflow as tf
from logging import PlaceHolder
from tensorflow.keras.models import load_model
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout,BatchNormalization,Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import streamlit  # üëà Add the caching decorator
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, Bidirectional, Dropout
from tensorflow.keras.optimizers import Adam
import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from util import config

# D√©finir la taille de la police souhait√©e
font_size = "30px"

# D√©finir la police de caract√®res souhait√©e
font_family = "Times New Roman, serif"


# D√©finir la couleur du texte souhait√©e (code hexad√©cimal)
text_color = "green"

# Custom style settings
button_style = f"font-size: 50px; color: white; background-color: #2e6b8e; border-radius: 8px; padding: 10px 20px;"

result_text_style = f"font-size: 30px; color: white; font-family: 'Times New Roman', serif;"

config()

# Charger le mod√®le
model = load_model('model_US.h5')

# Fonction de pr√©diction
def predict(img):
    # Redimensionner et convertir l'image en RGB
    img = img.resize((64, 64)).convert('RGB')
    # Pr√©traiter l'image
    img = img.resize((64, 64))
    img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = img / 255.0  # Normaliser les valeurs des pixels

    # Effectuer la pr√©diction
    prediction = model.predict(img)
    return prediction

def main():
    # D√©finir la taille de la police souhait√©e
    font_size = "30px"

# D√©finir la police de caract√®res souhait√©e
    font_family = "Times New Roman, serif"

# D√©finir la couleur du texte souhait√©e (code hexad√©cimal)
    text_color = "yellow"

    st.title("Application de Prediction de Grossesse gr√¢ce aux Echographies Abdominales")
    # Widget pour t√©l√©charger une image
    uploaded_file = st.file_uploader("Uploader une image d'√©chographie abdominale...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        # Affichez l'image t√©l√©charg√©e
        image = Image.open(uploaded_file)
        st.image(image, caption="Image t√©l√©charg√©e", use_column_width=True)

        # Bouton de pr√©diction
        if st.button("PREDICTION"):
            # Effectuez la pr√©diction en utilisant votre fonction predict
            prediction_result = predict(image)
            predicted_labels = np.where(prediction_result > 0.5, 1, 0)

            # Interpret the prediction
            probability = predicted_labels[0][0]
            if probability >= 0.5 :
                    
                detection = "PREGNANCY"
            else:
                detection = "NO PREGNANCY"



    # Utiliser les param√®tres de style dans la cha√Æne HTML
            st.markdown(
                f'<div style="font-size: {font_size}; color: {text_color}; font-family: {font_family};">'
                '</div>',
                unsafe_allow_html=True
            )
       
            st.write(
                    f'<div style="font-size: {font_size}; color: {text_color}; font-family: {font_family};">'
                    f"Diagnostic: {detection} (Probability: {probability:.3f})"
                    '</div>',
                    unsafe_allow_html=True
                )   

if __name__ == "__main__":
    main()

